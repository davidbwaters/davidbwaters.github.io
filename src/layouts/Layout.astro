---
export interface Props {
	title: string;
}

const { title } = Astro.props;

---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link
			href="https://use.typekit.net/brg7xei.css"
			rel="preload stylesheet"
			as="style"
			crossorigin
		>
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<style is:global lang='scss'>

			@use 'node_modules/@substructure/settings';
			@use 'node_modules/@substructure/tools';
			@use 'node_modules/@substructure/generic-initialize';
			@use 'node_modules/@substructure/generic-shared';
			@use 'node_modules/@substructure/elements-base';
			@use '@substructure/elements-root-properties';
			@use 'node_modules/@substructure/elements-text';
			@use 'node_modules/@substructure/objects-layout';
			@use 'node_modules/@substructure/objects-media';
			@use 'node_modules/@substructure/objects-wrapper';
			@use 'node_modules/@substructure/utilities-sizing';
			@use 'node_modules/@substructure/utilities-spacing';
			@use 'node_modules/@substructure/utilities-text-align';
			@use 'node_modules/@substructure/utilities-text-sizing';
			@use 'node_modules/@substructure/utilities-z-index';

			@use '../stylesheets/fonts';
			@use '../stylesheets/theme';
			@use '../stylesheets/components-awwwards';
			@use '../stylesheets/components-button';
			@use '../stylesheets/components-icons';
			@use '../stylesheets/components-icon-button';
			@use '../stylesheets/components-lightbox';
			@use '../stylesheets/components-media-grid';
			@use '../stylesheets/components-page-footer';
			@use '../stylesheets/components-skill-list';
			@use '../stylesheets/elements-base' as elements-base-local;
			@use '../stylesheets/elements-text' as elements-text-local;
			@use '../stylesheets/utilities';

			.js-canvas-paint,
			.js-canvas-paint canvas {
				height: 100vh;
				position: absolute;
				top: 0;
				width: 100%;
				z-index: 1;
			}

			#flowmap {
				height: 100vh;
			}

			#skills,
			#work {
				background-color: var(--color-bg);
			}

		</style>
	</head>

	<body data-theme="dark">
		<slot />

    <c-canvas-noise/>

			<c-loader>
				<div style="display: grid;grid-template-columns: clamp(3rem, 4vw, 8rem);grid-template-rows: min-content;place-content: center;">
					<svg class="c-logo u-theme-fill" width="48px" height="48px" viewBox="0 0 48 48" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
						<title>Artboard</title>
						<g id="Artboard" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
								<g id="Logo" transform="translate(0.000000, 5.000000)" fill="currentColor" fill-rule="nonzero">
										<path d="M9.6,0 L9.6,38.4 L0,38.4 L0,0 L9.6,0 Z M48,19.2 L48,28.8 L38.4,38.4 L38.4,19.2 L48,19.2 Z M28.8,0 L28.8,28.8 L19.2,38.4 L19.2,0 L28.8,0 Z M48,0 L48,9.6 L38.4,19.2 L38.4,0 L48,0 Z"></path>
								</g>
						</g>
					</svg>
				</div>
			</c-loader>

		<c-cursor/>

		<svg
			class='u-morphing-animation'
			style="display: none;"
			version="1.1"
			xmlns="http://www.w3.org/2000/svg"
			xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve"
			x="0px" y="0px"
			viewBox="0 0 200 120"
			overflow="scroll"
		>
			<!-- SVG Filter -->
			<filter id="animate" width="150%" height="150%">
				<!-- Generate Noise - fractalNoise/turbulent -->
				<feTurbulence type="fractalNoise" seed="77"
											numOctaves="1" baseFrequency="0.01" />
				<!-- Cycle through Hue - Hue wheel allows for seamless loop  -->
				<feColorMatrix type="hueRotate" values="0">
				</feColorMatrix>
				<!-- Extract alpha / filter colors -->
				<feColorMatrix type="matrix"
											values="1 0 0 0 0
															0 1 0 0 0
															0 0 1 0 0
															0 0 0 0 1" />
				<!-- Optional Filters -->
				<!-- <feMorphology operator="dilate" radius="1" /> -->
				<!-- <feMorphology operator="erode" radius="1" /> -->
				<feGaussianBlur stdDeviation="0.5" />
				<!-- Apply Displacement Map -->
				<feDisplacementMap
					in="SourceGraphic" scale="8"
					xChannelSelector="R"
					yChannelSelector="B"
				/>
				<!-- Blending with Original -->
				<!-- <feBlend mode="soft-light" in2="SourceGraphic"/> -->
				<!-- <feComposite operator="in" in2="SourceGraphic"/> -->
			</filter>
			<!-- Object to be filtered -->
			<circle filter="url(#animate)" fill="#202020"
							cx="100" cy="60" r="50" />
			<!-- <rect filter="url(#animate)" fill="#202020"
			x="50" y="10" width="100" height="100" /> -->
		</svg>
		<script>
			import '../components/CanvasNoise'
			import '../components/Cursor'
		</script>
	</body>
</html>
