'use strict';

var axios = require('axios');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

class ItemsHandler {
    constructor(collection, axios) {
        this.axios = axios;
        this.endpoint = collection.startsWith('directus_')
            ? `/${collection.substring(9)}/`
            : `/items/${collection}/`;
    }
    async create(payloads, query) {
        const result = await this.axios.post(this.endpoint, payloads, {
            params: query,
        });
        return result.data;
    }
    async read(keysOrQuery, query) {
        let keys = null;
        if (keysOrQuery &&
            (Array.isArray(keysOrQuery) ||
                typeof keysOrQuery === 'string' ||
                typeof keysOrQuery === 'number')) {
            keys = keysOrQuery;
        }
        let params = {};
        if (query) {
            params = query;
        }
        else if (!query &&
            typeof keysOrQuery === 'object' &&
            Array.isArray(keysOrQuery) === false) {
            params = keysOrQuery;
        }
        let endpoint = this.endpoint;
        if (keys) {
            endpoint += keys;
        }
        const result = await this.axios.get(endpoint, { params });
        return result.data;
    }
    async update(keyOrPayload, payloadOrQuery, query) {
        if (typeof keyOrPayload === 'string' ||
            typeof keyOrPayload === 'number' ||
            (Array.isArray(keyOrPayload) &&
                keyOrPayload.every((key) => ['string', 'number'].includes(typeof key)))) {
            const key = keyOrPayload;
            const payload = payloadOrQuery;
            const result = await this.axios.patch(`${this.endpoint}${key}`, payload, {
                params: query,
            });
            return result.data;
        }
        else {
            const result = await this.axios.patch(`${this.endpoint}`, keyOrPayload, {
                params: payloadOrQuery,
            });
            return result.data;
        }
    }
    async delete(keys) {
        await this.axios.delete(`${this.endpoint}${keys}`);
    }
}

class ServerHandler {
    constructor(axios) {
        this.specs = {
            oas: async () => {
                const result = await this.axios.get('/server/specs/oas');
                return result.data;
            },
        };
        this.axios = axios;
    }
    async ping() {
        await this.axios.get('/server/ping');
        return 'pong';
    }
    async info() {
        const result = await this.axios.get('/server/info');
        return result.data;
    }
}

class UtilsHandler {
    constructor(axios) {
        this.random = {
            string: async (length = 32) => {
                const result = await this.axios.get('/utils/random/string', { params: { length } });
                return result.data;
            },
        };
        this.hash = {
            generate: async (string) => {
                const result = await this.axios.post('/utils/hash/generate', { string });
                return result.data;
            },
            verify: async (string, hash) => {
                const result = await this.axios.post('/utils/hash/verify', { string, hash });
                return result.data;
            },
        };
        this.axios = axios;
    }
    async sort(collection, item, to) {
        await this.axios.post(`/utils/sort/${collection}`, { item, to });
    }
    async revert(revision) {
        await this.axios.post(`/utils/revert/${revision}`);
    }
}

class ActivityHandler {
    constructor(axios) {
        this.comments = {
            create: async (payload) => {
                const response = await this.axios.post('/activity/comments', payload);
                return response.data;
            },
            update: async (key, payload) => {
                const response = await this.axios.patch(`/activity/comments/${key}`, payload);
                return response.data;
            },
            delete: async (key) => {
                await this.axios.delete(`/activity/comments/${key}`);
            },
        };
        this.axios = axios;
        this.itemsHandler = new ItemsHandler('directus_activity', axios);
    }
    async read(keysOrQuery, query) {
        const result = await this.itemsHandler.read(keysOrQuery, query);
        return result;
    }
}

class FoldersHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_folders', axios);
    }
}

class PermissionsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_permissions', axios);
    }
}

class PresetsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_presets', axios);
    }
}

class RelationsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_relations', axios);
    }
}

class RevisionsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_revisions', axios);
    }
}

class RolesHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_roles', axios);
    }
}

class UsersHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_users', axios);
        this.tfa = {
            enable: async (password) => {
                await this.axios.post('/users/tfa/enable', { password });
            },
            disable: async (otp) => {
                await this.axios.post('/users/tfa/disable', { otp });
            },
        };
        this.me = {
            read: async (query) => {
                const response = await this.axios.get('/users/me', { params: query });
                return response.data;
            },
            update: async (payload, query) => {
                const response = await this.axios.patch('/users/me', payload, { params: query });
                return response.data;
            },
        };
    }
    async invite(email, role) {
        await this.axios.post('/users/invite', { email, role });
    }
    async acceptInvite(token, password) {
        await this.axios.post('/users/invite/accept', { token, password });
    }
}

class SettingsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_settings', axios);
    }
}

class FilesHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_files', axios);
    }
}

class CollectionsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_collections', axios);
    }
}

class FieldsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_fields', axios);
    }
}

class AuthHandler {
    constructor(axios, options) {
        this.password = {
            request: async (email) => {
                await this.axios.post('/auth/password/request', { email });
            },
            reset: async (token, password) => {
                await this.axios.post('/auth/password/reset', { token, password });
            },
        };
        this.axios = axios;
        this.storage = options.storage;
        this.mode = options.mode;
        this.autoRefresh = options.autoRefresh;
        if (this.autoRefresh) {
            this.refresh();
        }
    }
    get token() {
        return this.axios.defaults.headers?.Authorization?.split(' ')[1] || null;
    }
    set token(val) {
        this.axios.defaults.headers = {
            ...(this.axios.defaults.headers || {}),
            Authorization: val ? `Bearer ${val}` : undefined,
        };
    }
    async login(credentials) {
        const response = await this.axios.post('/auth/login', {
            ...credentials,
            mode: this.mode,
        });
        this.token = response.data.data.access_token;
        if (this.mode === 'json') {
            await this.storage.setItem('directus_refresh_token', response.data.data.refresh_token);
        }
        if (this.autoRefresh) {
            setTimeout(() => this.refresh(), response.data.data.expires - 10000);
        }
        return response.data;
    }
    async refresh() {
        const payload = { mode: this.mode };
        if (this.mode === 'json') {
            const refreshToken = await this.storage.getItem('directus_refresh_token');
            payload['refresh_token'] = refreshToken;
        }
        const response = await this.axios.post('/auth/refresh', payload);
        this.token = response.data.data.access_token;
        if (this.mode === 'json') {
            await this.storage.setItem('directus_refresh_token', response.data.data.refresh_token);
        }
        if (this.autoRefresh) {
            setTimeout(() => this.refresh(), response.data.data.expires - 10000);
        }
        return response.data;
    }
    async logout() {
        await this.axios.post('/auth/logout');
        this.token = null;
    }
}

class MemoryStore {
    constructor() {
        this.values = {};
    }
    async getItem(key) {
        return this.values[key];
    }
    async setItem(key, value) {
        this.values[key] = value;
    }
}

class DirectusSDK {
    constructor(url, options) {
        this.axios = axios__default['default'].create({
            baseURL: url,
        });
        this.authOptions = {
            storage: options?.auth?.storage !== undefined ? options.auth.storage : new MemoryStore(),
            mode: options?.auth?.mode !== undefined ? options.auth.mode : 'cookie',
            autoRefresh: options?.auth?.autoRefresh !== undefined ? options.auth.autoRefresh : false,
        };
    }
    // Global helpers
    ////////////////////////////////////////////////////////////////////////////////////////////////
    get url() {
        return this.axios.defaults.baseURL;
    }
    set url(val) {
        this.axios.defaults.baseURL = val;
    }
    // Handlers
    ////////////////////////////////////////////////////////////////////////////////////////////////
    items(collection) {
        if (collection.startsWith('directus_')) {
            throw new Error(`You can't read the "${collection}" collection directly.`);
        }
        return new ItemsHandler(collection, this.axios);
    }
    get activity() {
        return new ActivityHandler(this.axios);
    }
    get auth() {
        return new AuthHandler(this.axios, this.authOptions);
    }
    get collections() {
        return new CollectionsHandler(this.axios);
    }
    get fields() {
        return new FieldsHandler(this.axios);
    }
    get files() {
        return new FilesHandler(this.axios);
    }
    get folders() {
        return new FoldersHandler(this.axios);
    }
    get permissions() {
        return new PermissionsHandler(this.axios);
    }
    get presets() {
        return new PresetsHandler(this.axios);
    }
    get relations() {
        return new RelationsHandler(this.axios);
    }
    get revisions() {
        return new RevisionsHandler(this.axios);
    }
    get roles() {
        return new RolesHandler(this.axios);
    }
    get server() {
        return new ServerHandler(this.axios);
    }
    get settings() {
        return new SettingsHandler(this.axios);
    }
    get users() {
        return new UsersHandler(this.axios);
    }
    get utils() {
        return new UtilsHandler(this.axios);
    }
}

module.exports = DirectusSDK;
//# sourceMappingURL=sdk-js.cjs.js.map
