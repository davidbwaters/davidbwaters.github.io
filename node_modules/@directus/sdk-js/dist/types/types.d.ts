export declare type Item = Record<string, any>;
export declare type Payload = Record<string, any>;
export declare type PrimaryKey = string | number;
export declare enum Meta {
    TOTAL_COUNT = "total_count",
    FILTER_COUNT = "filter_count"
}
export declare type Response<T> = {
    data: T | null;
    meta?: Record<Meta, number>;
};
export declare type Query = {
    fields?: string | string[];
    sort?: string;
    filter?: Filter;
    limit?: number;
    offset?: number;
    page?: number;
    single?: boolean;
    meta?: Meta[];
    search?: string;
    export?: 'json' | 'csv';
    deep?: Record<string, Query>;
};
export declare type Filter = {
    [keyOrOperator: string]: Filter | string | boolean | number | string[];
};
export declare type FilterOperator = '_eq' | '_neq' | '_contains' | '_ncontains' | '_in' | '_nin' | '_gt' | '_gte' | '_lt' | '_lte' | '_null' | '_nnull' | '_empty' | '_nempty';
export declare type AuthStorage = {
    getItem: (key: string) => Promise<any>;
    setItem: (key: string, value: any) => Promise<any>;
};
