import axios from 'axios';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class ItemsHandler {
    constructor(collection, axios) {
        this.axios = axios;
        this.endpoint = collection.startsWith('directus_')
            ? `/${collection.substring(9)}/`
            : `/items/${collection}/`;
    }
    create(payloads, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.axios.post(this.endpoint, payloads, {
                params: query,
            });
            return result.data;
        });
    }
    read(keysOrQuery, query) {
        return __awaiter(this, void 0, void 0, function* () {
            let keys = null;
            if (keysOrQuery &&
                (Array.isArray(keysOrQuery) ||
                    typeof keysOrQuery === 'string' ||
                    typeof keysOrQuery === 'number')) {
                keys = keysOrQuery;
            }
            let params = {};
            if (query) {
                params = query;
            }
            else if (!query &&
                typeof keysOrQuery === 'object' &&
                Array.isArray(keysOrQuery) === false) {
                params = keysOrQuery;
            }
            let endpoint = this.endpoint;
            if (keys) {
                endpoint += keys;
            }
            const result = yield this.axios.get(endpoint, { params });
            return result.data;
        });
    }
    update(keyOrPayload, payloadOrQuery, query) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof keyOrPayload === 'string' ||
                typeof keyOrPayload === 'number' ||
                (Array.isArray(keyOrPayload) &&
                    keyOrPayload.every((key) => ['string', 'number'].includes(typeof key)))) {
                const key = keyOrPayload;
                const payload = payloadOrQuery;
                const result = yield this.axios.patch(`${this.endpoint}${key}`, payload, {
                    params: query,
                });
                return result.data;
            }
            else {
                const result = yield this.axios.patch(`${this.endpoint}`, keyOrPayload, {
                    params: payloadOrQuery,
                });
                return result.data;
            }
        });
    }
    delete(keys) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.axios.delete(`${this.endpoint}${keys}`);
        });
    }
}

class ServerHandler {
    constructor(axios) {
        this.specs = {
            oas: () => __awaiter(this, void 0, void 0, function* () {
                const result = yield this.axios.get('/server/specs/oas');
                return result.data;
            }),
        };
        this.axios = axios;
    }
    ping() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.axios.get('/server/ping');
            return 'pong';
        });
    }
    info() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.axios.get('/server/info');
            return result.data;
        });
    }
}

class UtilsHandler {
    constructor(axios) {
        this.random = {
            string: (length = 32) => __awaiter(this, void 0, void 0, function* () {
                const result = yield this.axios.get('/utils/random/string', { params: { length } });
                return result.data;
            }),
        };
        this.hash = {
            generate: (string) => __awaiter(this, void 0, void 0, function* () {
                const result = yield this.axios.post('/utils/hash/generate', { string });
                return result.data;
            }),
            verify: (string, hash) => __awaiter(this, void 0, void 0, function* () {
                const result = yield this.axios.post('/utils/hash/verify', { string, hash });
                return result.data;
            }),
        };
        this.axios = axios;
    }
    sort(collection, item, to) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.axios.post(`/utils/sort/${collection}`, { item, to });
        });
    }
    revert(revision) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.axios.post(`/utils/revert/${revision}`);
        });
    }
}

class ActivityHandler {
    constructor(axios) {
        this.comments = {
            create: (payload) => __awaiter(this, void 0, void 0, function* () {
                const response = yield this.axios.post('/activity/comments', payload);
                return response.data;
            }),
            update: (key, payload) => __awaiter(this, void 0, void 0, function* () {
                const response = yield this.axios.patch(`/activity/comments/${key}`, payload);
                return response.data;
            }),
            delete: (key) => __awaiter(this, void 0, void 0, function* () {
                yield this.axios.delete(`/activity/comments/${key}`);
            }),
        };
        this.axios = axios;
        this.itemsHandler = new ItemsHandler('directus_activity', axios);
    }
    read(keysOrQuery, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.itemsHandler.read(keysOrQuery, query);
            return result;
        });
    }
}

class FoldersHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_folders', axios);
    }
}

class PermissionsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_permissions', axios);
    }
}

class PresetsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_presets', axios);
    }
}

class RelationsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_relations', axios);
    }
}

class RevisionsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_revisions', axios);
    }
}

class RolesHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_roles', axios);
    }
}

class UsersHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_users', axios);
        this.tfa = {
            enable: (password) => __awaiter(this, void 0, void 0, function* () {
                yield this.axios.post('/users/tfa/enable', { password });
            }),
            disable: (otp) => __awaiter(this, void 0, void 0, function* () {
                yield this.axios.post('/users/tfa/disable', { otp });
            }),
        };
        this.me = {
            read: (query) => __awaiter(this, void 0, void 0, function* () {
                const response = yield this.axios.get('/users/me', { params: query });
                return response.data;
            }),
            update: (payload, query) => __awaiter(this, void 0, void 0, function* () {
                const response = yield this.axios.patch('/users/me', payload, { params: query });
                return response.data;
            }),
        };
    }
    invite(email, role) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.axios.post('/users/invite', { email, role });
        });
    }
    acceptInvite(token, password) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.axios.post('/users/invite/accept', { token, password });
        });
    }
}

class SettingsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_settings', axios);
    }
}

class FilesHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_files', axios);
    }
}

class CollectionsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_collections', axios);
    }
}

class FieldsHandler extends ItemsHandler {
    constructor(axios) {
        super('directus_fields', axios);
    }
}

class AuthHandler {
    constructor(axios, options) {
        this.password = {
            request: (email) => __awaiter(this, void 0, void 0, function* () {
                yield this.axios.post('/auth/password/request', { email });
            }),
            reset: (token, password) => __awaiter(this, void 0, void 0, function* () {
                yield this.axios.post('/auth/password/reset', { token, password });
            }),
        };
        this.axios = axios;
        this.storage = options.storage;
        this.mode = options.mode;
        this.autoRefresh = options.autoRefresh;
        if (this.autoRefresh) {
            this.refresh();
        }
    }
    get token() {
        var _a, _b;
        return ((_b = (_a = this.axios.defaults.headers) === null || _a === void 0 ? void 0 : _a.Authorization) === null || _b === void 0 ? void 0 : _b.split(' ')[1]) || null;
    }
    set token(val) {
        this.axios.defaults.headers = Object.assign(Object.assign({}, (this.axios.defaults.headers || {})), { Authorization: val ? `Bearer ${val}` : undefined });
    }
    login(credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.axios.post('/auth/login', Object.assign(Object.assign({}, credentials), { mode: this.mode }));
            this.token = response.data.data.access_token;
            if (this.mode === 'json') {
                yield this.storage.setItem('directus_refresh_token', response.data.data.refresh_token);
            }
            if (this.autoRefresh) {
                setTimeout(() => this.refresh(), response.data.data.expires - 10000);
            }
            return response.data;
        });
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = { mode: this.mode };
            if (this.mode === 'json') {
                const refreshToken = yield this.storage.getItem('directus_refresh_token');
                payload['refresh_token'] = refreshToken;
            }
            const response = yield this.axios.post('/auth/refresh', payload);
            this.token = response.data.data.access_token;
            if (this.mode === 'json') {
                yield this.storage.setItem('directus_refresh_token', response.data.data.refresh_token);
            }
            if (this.autoRefresh) {
                setTimeout(() => this.refresh(), response.data.data.expires - 10000);
            }
            return response.data;
        });
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.axios.post('/auth/logout');
            this.token = null;
        });
    }
}

class MemoryStore {
    constructor() {
        this.values = {};
    }
    getItem(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.values[key];
        });
    }
    setItem(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            this.values[key] = value;
        });
    }
}

class DirectusSDK {
    constructor(url, options) {
        var _a, _b, _c;
        this.axios = axios.create({
            baseURL: url,
        });
        this.authOptions = {
            storage: ((_a = options === null || options === void 0 ? void 0 : options.auth) === null || _a === void 0 ? void 0 : _a.storage) !== undefined ? options.auth.storage : new MemoryStore(),
            mode: ((_b = options === null || options === void 0 ? void 0 : options.auth) === null || _b === void 0 ? void 0 : _b.mode) !== undefined ? options.auth.mode : 'cookie',
            autoRefresh: ((_c = options === null || options === void 0 ? void 0 : options.auth) === null || _c === void 0 ? void 0 : _c.autoRefresh) !== undefined ? options.auth.autoRefresh : false,
        };
    }
    // Global helpers
    ////////////////////////////////////////////////////////////////////////////////////////////////
    get url() {
        return this.axios.defaults.baseURL;
    }
    set url(val) {
        this.axios.defaults.baseURL = val;
    }
    // Handlers
    ////////////////////////////////////////////////////////////////////////////////////////////////
    items(collection) {
        if (collection.startsWith('directus_')) {
            throw new Error(`You can't read the "${collection}" collection directly.`);
        }
        return new ItemsHandler(collection, this.axios);
    }
    get activity() {
        return new ActivityHandler(this.axios);
    }
    get auth() {
        return new AuthHandler(this.axios, this.authOptions);
    }
    get collections() {
        return new CollectionsHandler(this.axios);
    }
    get fields() {
        return new FieldsHandler(this.axios);
    }
    get files() {
        return new FilesHandler(this.axios);
    }
    get folders() {
        return new FoldersHandler(this.axios);
    }
    get permissions() {
        return new PermissionsHandler(this.axios);
    }
    get presets() {
        return new PresetsHandler(this.axios);
    }
    get relations() {
        return new RelationsHandler(this.axios);
    }
    get revisions() {
        return new RevisionsHandler(this.axios);
    }
    get roles() {
        return new RolesHandler(this.axios);
    }
    get server() {
        return new ServerHandler(this.axios);
    }
    get settings() {
        return new SettingsHandler(this.axios);
    }
    get users() {
        return new UsersHandler(this.axios);
    }
    get utils() {
        return new UtilsHandler(this.axios);
    }
}

export default DirectusSDK;
//# sourceMappingURL=sdk-js.bundler.js.map
