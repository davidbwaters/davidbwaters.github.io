{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///imagePreloader.min.js","webpack:///webpack/bootstrap b8842d57c03664b6d4ab","webpack:///./src/index.js","webpack:///./src/main.js","webpack:///./~/promise-ext-settled/src/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","allSettled","ImagePreloader","fallbackImage","onProgress","HTMLImageElement","simplePreload","imageSource","Promise","resolve","reject","img","complete","naturalHeight","onload","bind","onerror","onabort","Image","src","prototype","preload","args","that","imagesToLoad","Array","concat","apply","slice","arguments","map","brokenImage","then","setAttribute","promises","mapped","promise","value","status","e","all"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GEjDhCL,EAAAD,QAAAM,EAAA,IF6DM,SAASL,EAAQD,EAASM,GG7DhC,GAAAS,GAAAT,EAAA,GAWAU,EAAA,SAAAC,EAAAC,GAIAd,KAAAc,WAAA,kBAAAA,KAAA,KAIAd,KAAAa,cAAA,gBAAAA,gBAAAE,kBAAAF,EAAA,KAUAD,GAAAI,cAAA,SAAAC,GACA,UAAAC,SAAA,SAAAC,EAAAC,GACA,GAAAC,EAEAJ,aAAAF,mBACAM,EAAAJ,EAEAI,EAAAC,SAGaD,EAAAE,cACbJ,EAAAE,GAEAD,EAAAC,IALAA,EAAAG,OAAAL,EAAAM,KAAA,KAAAJ,GACAA,EAAAK,QAAAL,EAAAM,QAAAP,EAAAK,KAAA,KAAAJ,KAMS,gBAAAJ,KACTI,EAAA,GAAAO,OACAP,EAAAG,OAAAL,EAAAM,KAAA,KAAAJ,GACAA,EAAAK,QAAAL,EAAAM,QAAAP,EAAAK,KAAA,KAAAJ,GACAA,EAAAQ,IAAAZ,MA2BAL,EAAAkB,UAAAC,QAAA,SAAAC,GACA,GAAAC,GAAAjC,KACAkC,EAAAC,MAAAL,UAAAM,OAAAC,SAAAF,MAAAL,UAAAQ,MAAA/B,KAAAgC,WAoBA,OAlBAL,KAAAM,IAAA,SAAAvB,GACA,MAAAL,GAAAI,cAAAC,GAAAL,SAAA,SAAA6B,GACA,MAAAR,GAAApB,cACAD,EAAAI,cAAAiB,EAAApB,eACA6B,KAAA,SAAA7B,GAIA,MAHA4B,GAAAE,aAAA,gBAAAF,EAAAZ,KACAY,EAAAZ,IAAAhB,EAAAgB,IAEAY,GACqB,WACrB,MAAAvB,SAAAE,OAAAqB,KAIAvB,QAAAE,OAAAqB,OAIA9B,EAAAuB,EAAAD,EAAAnB,aAGAjB,EAAAD,QAAAgB,GHyEM,SAASf,EAAQD,GIjKvB,QAAAe,GAAAiC,EAAA9B,GACA,GAAA+B,GAAAD,EAAAJ,IAAA,SAAAM,GACA,MAAAA,GAAAJ,KAAA,SAAAK,GACA,OACAA,QACAC,QAAA,IAES,SAAAC,GACT,OACAF,MAAAE,EACAD,QAAA,KAESN,KAAA,SAAAK,GAKT,MAJA,kBAAAjC,IACAA,EAAAiC,GAGAA,KAIA,OAAA7B,SAAAgC,IAAAL,GAGAhD,EAAAD,QAAAe","file":"imagePreloader.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"imagePreloader\"] = factory();\n\telse\n\t\troot[\"imagePreloader\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"imagePreloader\"] = factory();\n\telse\n\t\troot[\"imagePreloader\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @licence MIT\n\t * @author Sergey Melyukov\n\t */\n\t\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @licence MIT\n\t * @author Sergey Melyukov\n\t */\n\t\n\tvar allSettled = __webpack_require__(2);\n\t\n\t/**\n\t * Image preloader\n\t *\n\t * @class ImagePreloader\n\t * @constructor\n\t *\n\t * @param {(String|HTMLImageElement)=} fallbackImage\n\t * @param {function({status:boolean, value:HTMLImageElement})=} onProgress\n\t */\n\tvar ImagePreloader = function(fallbackImage, onProgress) {\n\t    /**\n\t     * @type {?function({status: boolean, value: HTMLImageElement})}\n\t     */\n\t    this.onProgress = typeof onProgress === 'function' ? onProgress : null;\n\t    /**\n\t     * @type {?String|HTMLImageElement}\n\t     */\n\t    this.fallbackImage = typeof fallbackImage === 'string' || fallbackImage instanceof HTMLImageElement ? fallbackImage : null;\n\t};\n\t\n\t/**\n\t * Do simple image preloading.\n\t *\n\t * @param {!(String|HTMLImageElement)} imageSource\n\t *\n\t * @return {Promise} will be resolved/rejected with HTMLImageElement\n\t */\n\tImagePreloader.simplePreload = function(imageSource) {\n\t    return new Promise(function(resolve, reject) {\n\t        var img;\n\t\n\t        if (imageSource instanceof HTMLImageElement) {\n\t            img = imageSource;\n\t\n\t            if (!img.complete) {\n\t                img.onload = resolve.bind(null, img);\n\t                img.onerror = img.onabort = reject.bind(null, img);\n\t            } else if (img.naturalHeight) {\n\t                resolve(img);\n\t            } else {\n\t                reject(img);\n\t            }\n\t        } else if (typeof imageSource === 'string') {\n\t            img = new Image();\n\t            img.onload = resolve.bind(null, img);\n\t            img.onerror = img.onabort = reject.bind(null, img);\n\t            img.src = imageSource;\n\t        }\n\t    });\n\t};\n\t\n\t/**\n\t * Preload image.\n\t *\n\t * If fallbackImage-property is defined and correct, then src-attribute for the broken images will replaced by fallbackImage\n\t * As well, origin image url will be placed to 'data-fail-src' attribute.\n\t *\n\t * If onProgress-method is defined, then this method will be calling for every image loading (fulfilled of rejected).\n\t *\n\t * @param {...(String|HTMLImageElement|Array<String|HTMLImageElement>)} args\n\t *\n\t * @return {Promise} will be resolved with Array<{status:boolean, value:HTMLImageElement}>\n\t *\n\t *     status-property - is the status of image loading\n\t *     status-property will be true if:\n\t *      - original image loading is ok\n\t *      - or original image loading is fail but fallback-image loading is ok\n\t *     status-property will be false if:\n\t *      - original image loading is fail\n\t *      - or original image loading is fail and fallback-image loading is fail\n\t *\n\t *     value-property - is the image that was loaded\n\t */\n\tImagePreloader.prototype.preload = function(args) {\n\t    var that = this,\n\t        imagesToLoad = Array.prototype.concat.apply([], Array.prototype.slice.call(arguments));\n\t\n\t    imagesToLoad = imagesToLoad.map(function(imageSource) {\n\t        return ImagePreloader.simplePreload(imageSource).catch(function(brokenImage) {\n\t            if (that.fallbackImage) {\n\t                return ImagePreloader.simplePreload(that.fallbackImage)\n\t                    .then(function(fallbackImage) {\n\t                        brokenImage.setAttribute('data-fail-src', brokenImage.src);\n\t                        brokenImage.src = fallbackImage.src;\n\t\n\t                        return brokenImage;\n\t                    }, function() {\n\t                        return Promise.reject(brokenImage);\n\t                    });\n\t            }\n\t\n\t            return Promise.reject(brokenImage);\n\t        });\n\t    });\n\t\n\t    return allSettled(imagesToLoad, that.onProgress);\n\t};\n\t\n\tmodule.exports = ImagePreloader;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @licence\n\t * @author Sergey Melyukov 2016\n\t */\n\t\n\t/**\n\t * Waiting while all promises will be settled to onFulfilled or onRejected state\n\t * Returned promise will be resolved with array with info for every passed promise:\n\t * Array<{status:boolean, value:*}>\n\t *\n\t * onProgress-function will be called (if passed) for every settled promise\n\t *\n\t * @param {Array<Promise>} promises\n\t * @param {function({status:boolean, value:*})=} onProgress\n\t *\n\t * @return {Promise}\n\t */\n\tfunction allSettled(promises, onProgress) {\n\t    var mapped = promises.map(function(promise) {\n\t        return promise.then(function(value) {\n\t            return {\n\t                value: value,\n\t                status: true\n\t            };\n\t        }, function(e) {\n\t            return {\n\t                value: e,\n\t                status: false\n\t            };\n\t        }).then(function(value) {\n\t            if (typeof onProgress === 'function') {\n\t                onProgress(value);\n\t            }\n\t\n\t            return value;\n\t        });\n\t    });\n\t\n\t    return Promise.all(mapped);\n\t}\n\t\n\tmodule.exports = allSettled;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** imagePreloader.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b8842d57c03664b6d4ab\n **/","/**\n * @licence MIT\n * @author Sergey Melyukov\n */\n\nmodule.exports = require('./main');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","/**\n * @licence MIT\n * @author Sergey Melyukov\n */\n\nvar allSettled = require('promise-ext-settled');\n\n/**\n * Image preloader\n *\n * @class ImagePreloader\n * @constructor\n *\n * @param {(String|HTMLImageElement)=} fallbackImage\n * @param {function({status:boolean, value:HTMLImageElement})=} onProgress\n */\nvar ImagePreloader = function(fallbackImage, onProgress) {\n    /**\n     * @type {?function({status: boolean, value: HTMLImageElement})}\n     */\n    this.onProgress = typeof onProgress === 'function' ? onProgress : null;\n    /**\n     * @type {?String|HTMLImageElement}\n     */\n    this.fallbackImage = typeof fallbackImage === 'string' || fallbackImage instanceof HTMLImageElement ? fallbackImage : null;\n};\n\n/**\n * Do simple image preloading.\n *\n * @param {!(String|HTMLImageElement)} imageSource\n *\n * @return {Promise} will be resolved/rejected with HTMLImageElement\n */\nImagePreloader.simplePreload = function(imageSource) {\n    return new Promise(function(resolve, reject) {\n        var img;\n\n        if (imageSource instanceof HTMLImageElement) {\n            img = imageSource;\n\n            if (!img.complete) {\n                img.onload = resolve.bind(null, img);\n                img.onerror = img.onabort = reject.bind(null, img);\n            } else if (img.naturalHeight) {\n                resolve(img);\n            } else {\n                reject(img);\n            }\n        } else if (typeof imageSource === 'string') {\n            img = new Image();\n            img.onload = resolve.bind(null, img);\n            img.onerror = img.onabort = reject.bind(null, img);\n            img.src = imageSource;\n        }\n    });\n};\n\n/**\n * Preload image.\n *\n * If fallbackImage-property is defined and correct, then src-attribute for the broken images will replaced by fallbackImage\n * As well, origin image url will be placed to 'data-fail-src' attribute.\n *\n * If onProgress-method is defined, then this method will be calling for every image loading (fulfilled of rejected).\n *\n * @param {...(String|HTMLImageElement|Array<String|HTMLImageElement>)} args\n *\n * @return {Promise} will be resolved with Array<{status:boolean, value:HTMLImageElement}>\n *\n *     status-property - is the status of image loading\n *     status-property will be true if:\n *      - original image loading is ok\n *      - or original image loading is fail but fallback-image loading is ok\n *     status-property will be false if:\n *      - original image loading is fail\n *      - or original image loading is fail and fallback-image loading is fail\n *\n *     value-property - is the image that was loaded\n */\nImagePreloader.prototype.preload = function(args) {\n    var that = this,\n        imagesToLoad = Array.prototype.concat.apply([], Array.prototype.slice.call(arguments));\n\n    imagesToLoad = imagesToLoad.map(function(imageSource) {\n        return ImagePreloader.simplePreload(imageSource).catch(function(brokenImage) {\n            if (that.fallbackImage) {\n                return ImagePreloader.simplePreload(that.fallbackImage)\n                    .then(function(fallbackImage) {\n                        brokenImage.setAttribute('data-fail-src', brokenImage.src);\n                        brokenImage.src = fallbackImage.src;\n\n                        return brokenImage;\n                    }, function() {\n                        return Promise.reject(brokenImage);\n                    });\n            }\n\n            return Promise.reject(brokenImage);\n        });\n    });\n\n    return allSettled(imagesToLoad, that.onProgress);\n};\n\nmodule.exports = ImagePreloader;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/main.js\n ** module id = 1\n ** module chunks = 0\n **/","/**\n * @licence\n * @author Sergey Melyukov 2016\n */\n\n/**\n * Waiting while all promises will be settled to onFulfilled or onRejected state\n * Returned promise will be resolved with array with info for every passed promise:\n * Array<{status:boolean, value:*}>\n *\n * onProgress-function will be called (if passed) for every settled promise\n *\n * @param {Array<Promise>} promises\n * @param {function({status:boolean, value:*})=} onProgress\n *\n * @return {Promise}\n */\nfunction allSettled(promises, onProgress) {\n    var mapped = promises.map(function(promise) {\n        return promise.then(function(value) {\n            return {\n                value: value,\n                status: true\n            };\n        }, function(e) {\n            return {\n                value: e,\n                status: false\n            };\n        }).then(function(value) {\n            if (typeof onProgress === 'function') {\n                onProgress(value);\n            }\n\n            return value;\n        });\n    });\n\n    return Promise.all(mapped);\n}\n\nmodule.exports = allSettled;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/promise-ext-settled/src/index.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}